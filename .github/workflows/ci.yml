name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      run_long_tests:
        description: 'Run comprehensive tests (Docker, integration)'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Fast tests - always required for merge
  test:
    name: Fast Tests
    runs-on: ubuntu-latest
    outputs:
      has-code-changes: ${{ steps.changes.outputs.code }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: Check for code changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "code=true" >> $GITHUB_OUTPUT
          elif git diff --name-only origin/main...HEAD | grep -E '\.(py|txt|yml|yaml|Dockerfile)$' > /dev/null; then
            echo "code=true" >> $GITHUB_OUTPUT
          else
            echo "code=false" >> $GITHUB_OUTPUT
          fi
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run fast tests
        run: |
          python tools/test_runner.py --level fast
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: fast-test-results
          path: |
            .pytest_cache/
            htmlcov/
          retention-days: 7

  # Security scanning - runs in parallel with tests
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety bandit
          
      - name: Run security tests
        run: |
          python -m pytest -m security -v --tb=short
          
      - name: Check dependencies for vulnerabilities
        run: |
          safety check --json --output safety-report.json || true
          
      - name: Run bandit security linter
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          
      - name: Upload security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-results
          path: |
            safety-report.json
            bandit-report.json
          retention-days: 30

  # Comprehensive tests - conditional
  long-tests:
    name: Comprehensive Tests
    runs-on: ubuntu-latest
    needs: test
    if: |
      github.event.inputs.run_long_tests == 'true' || 
      contains(github.event.head_commit.message, '[test-docker]') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run comprehensive tests
        run: |
          python tools/test_runner.py --level all --verbose
          
      - name: Upload comprehensive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: comprehensive-test-results
          path: |
            .pytest_cache/
            htmlcov/
            logs/
          retention-days: 14

  # Docker build - only when code changes, after tests pass
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: needs.test.outputs.has-code-changes == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: calomal/weight-tracker
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          # Only build ARM64 on main branch pushes to save time on PRs
          platforms: ${{ github.event_name == 'pull_request' && 'linux/amd64' || 'linux/amd64,linux/arm64' }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Test Docker image
        if: github.event_name == 'pull_request'
        run: |
          docker run --rm --name test-container -d -p 8080:8080 calomal/weight-tracker:pr-${{ github.event.number }}
          sleep 10
          curl -f http://localhost:8080/ || exit 1
          docker stop test-container

  # Deployment readiness check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: always() && (needs.test.result == 'success' && needs.security.result == 'success')
    steps:
      - name: Check all required jobs
        run: |
          echo "‚úÖ Fast tests: ${{ needs.test.result }}"
          echo "‚úÖ Security scan: ${{ needs.security.result }}"
          echo "‚úÖ Docker build: ${{ needs.build.result || 'skipped (no code changes)' }}"
          
          if [ "${{ needs.test.result }}" != "success" ] || [ "${{ needs.security.result }}" != "success" ]; then
            echo "‚ùå Required checks failed"
            exit 1
          fi
          
          echo "üöÄ Ready for deployment!"
          
      - name: Update deployment status
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "Main branch updated - ready for production deployment"